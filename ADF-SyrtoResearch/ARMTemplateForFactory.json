{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-SyrtoResearch"
		},
		"CosmosDb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb'"
		},
		"ManualStagingBlob_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ManualStagingBlob'"
		},
		"AzureVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://SyrtoVault.vault.azure.net/"
		},
		"ManualStagingBlob_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://syrtostaging.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CosmosTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create Hierarchy and Upload",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Financials to staging blob",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Company Info to staging blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Cosmos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BalanceSheets": {},
									"Anagraphics": {},
									"ToCosmos": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Clear Financials Staging Blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Balance_Sheets_Staging",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Financials to staging blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Clear Financials Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": "SELECT * FROM \ntesting.cosmos_test.financials",
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DB_Delta_Lake",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Balance_Sheets_Staging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Clear Company Info Staging Blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Anagraphics_Staging",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Company Info to staging blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Clear Company Info Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": "SELECT * FROM testing.cosmos_test.company_info",
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DB_Delta_Lake",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Anagraphics_Staging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-17T11:44:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Cosmos')]",
				"[concat(variables('factoryId'), '/datasets/Balance_Sheets_Staging')]",
				"[concat(variables('factoryId'), '/datasets/DB_Delta_Lake')]",
				"[concat(variables('factoryId'), '/datasets/Anagraphics_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Anagraphics_Staging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ManualStagingBlob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "company_info",
						"fileSystem": "db-staging"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "att_ita",
						"type": "UTF8"
					},
					{
						"name": "att_en",
						"type": "UTF8"
					},
					{
						"name": "ATECO",
						"type": "INT64"
					},
					{
						"name": "NACE",
						"type": "INT64"
					},
					{
						"name": "name",
						"type": "UTF8"
					},
					{
						"name": "address",
						"type": "UTF8"
					},
					{
						"name": "zip_code",
						"type": "INT64"
					},
					{
						"name": "city",
						"type": "UTF8"
					},
					{
						"name": "province",
						"type": "UTF8"
					},
					{
						"name": "region",
						"type": "UTF8"
					},
					{
						"name": "lat",
						"type": "DOUBLE"
					},
					{
						"name": "lon",
						"type": "DOUBLE"
					},
					{
						"name": "ateco_lv1",
						"type": "INT64"
					},
					{
						"name": "ateco_lv2",
						"type": "INT64"
					},
					{
						"name": "ateco_lv3",
						"type": "INT64"
					},
					{
						"name": "nace_lv1",
						"type": "INT64"
					},
					{
						"name": "nace_lv2",
						"type": "INT64"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ManualStagingBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Balance_Sheets_Staging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ManualStagingBlob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "financials",
						"fileSystem": "db-staging"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "uuid",
						"type": "UTF8"
					},
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "year",
						"type": "INT64"
					},
					{
						"name": "features_calc_timestamp",
						"type": "INT96"
					},
					{
						"name": "AP1",
						"type": "INT64"
					},
					{
						"name": "AP2",
						"type": "INT64"
					},
					{
						"name": "AP2-1",
						"type": "INT64"
					},
					{
						"name": "AP2-2",
						"type": "INT64"
					},
					{
						"name": "AP2-3",
						"type": "INT64"
					},
					{
						"name": "AP3",
						"type": "INT64"
					},
					{
						"name": "AP3-1",
						"type": "INT64"
					},
					{
						"name": "AP3-2",
						"type": "INT64"
					},
					{
						"name": "AP3-2-1",
						"type": "INT64"
					},
					{
						"name": "AP3-2-2",
						"type": "INT64"
					},
					{
						"name": "AP3-3",
						"type": "INT64"
					},
					{
						"name": "AP3-4",
						"type": "INT64"
					},
					{
						"name": "AP3-5",
						"type": "INT64"
					},
					{
						"name": "AP4",
						"type": "INT64"
					},
					{
						"name": "AP",
						"type": "INT64"
					},
					{
						"name": "PP1",
						"type": "INT64"
					},
					{
						"name": "PP1-1",
						"type": "INT64"
					},
					{
						"name": "PP1-2",
						"type": "INT64"
					},
					{
						"name": "PP1-3",
						"type": "INT64"
					},
					{
						"name": "PP1-4",
						"type": "INT64"
					},
					{
						"name": "PP1-5",
						"type": "INT64"
					},
					{
						"name": "PP1-6",
						"type": "INT64"
					},
					{
						"name": "PP1-7",
						"type": "INT64"
					},
					{
						"name": "PP1-8",
						"type": "INT64"
					},
					{
						"name": "PP1-9",
						"type": "INT64"
					},
					{
						"name": "PP1-10",
						"type": "INT64"
					},
					{
						"name": "PP2",
						"type": "INT64"
					},
					{
						"name": "PP3",
						"type": "INT64"
					},
					{
						"name": "PP4",
						"type": "INT64"
					},
					{
						"name": "PP4-1",
						"type": "INT64"
					},
					{
						"name": "PP4-2",
						"type": "INT64"
					},
					{
						"name": "PP5",
						"type": "INT64"
					},
					{
						"name": "PP",
						"type": "INT64"
					},
					{
						"name": "Ecore1",
						"type": "INT64"
					},
					{
						"name": "Ecore1-1",
						"type": "INT64"
					},
					{
						"name": "Ecore1-2",
						"type": "INT64"
					},
					{
						"name": "Ecore1-3",
						"type": "INT64"
					},
					{
						"name": "Ecore1-4",
						"type": "INT64"
					},
					{
						"name": "Ecore1-5",
						"type": "INT64"
					},
					{
						"name": "Ecore1-6",
						"type": "INT64"
					},
					{
						"name": "Emod1",
						"type": "INT64"
					},
					{
						"name": "Emod1-1",
						"type": "INT64"
					},
					{
						"name": "Emod1-2",
						"type": "INT64"
					},
					{
						"name": "Emod1-3",
						"type": "INT64"
					},
					{
						"name": "Emod1-4",
						"type": "INT64"
					},
					{
						"name": "Emod1-4-1",
						"type": "INT64"
					},
					{
						"name": "Emod1-4-2",
						"type": "INT64"
					},
					{
						"name": "Emod1-4-3",
						"type": "INT64"
					},
					{
						"name": "Emod1-4-4",
						"type": "INT64"
					},
					{
						"name": "Emod1-4-5",
						"type": "INT64"
					},
					{
						"name": "Emod1-5",
						"type": "INT64"
					},
					{
						"name": "Emod1-5-1",
						"type": "INT64"
					},
					{
						"name": "Emod1-5-2",
						"type": "INT64"
					},
					{
						"name": "Emod1-5-3",
						"type": "INT64"
					},
					{
						"name": "Emod1-5-4",
						"type": "INT64"
					},
					{
						"name": "Emod1-6",
						"type": "INT64"
					},
					{
						"name": "Emod1-7",
						"type": "INT64"
					},
					{
						"name": "Emod1-8",
						"type": "INT64"
					},
					{
						"name": "Emod1-9",
						"type": "INT64"
					},
					{
						"name": "Ecore2",
						"type": "INT64"
					},
					{
						"name": "Emod2",
						"type": "INT64"
					},
					{
						"name": "Emod2-1",
						"type": "INT64"
					},
					{
						"name": "Emod2-2",
						"type": "INT64"
					},
					{
						"name": "Emod2-2-1",
						"type": "INT64"
					},
					{
						"name": "Emod2-2-2",
						"type": "INT64"
					},
					{
						"name": "Emod2-2-3",
						"type": "INT64"
					},
					{
						"name": "Emod2-2-4",
						"type": "INT64"
					},
					{
						"name": "Emod2-3",
						"type": "INT64"
					},
					{
						"name": "Emod2-4",
						"type": "INT64"
					},
					{
						"name": "Emod3",
						"type": "INT64"
					},
					{
						"name": "Emod3-1",
						"type": "INT64"
					},
					{
						"name": "Emod3-1-1",
						"type": "INT64"
					},
					{
						"name": "Emod3-1-2",
						"type": "INT64"
					},
					{
						"name": "Emod3-1-3",
						"type": "INT64"
					},
					{
						"name": "Emod3-1-4",
						"type": "INT64"
					},
					{
						"name": "Emod3-2",
						"type": "INT64"
					},
					{
						"name": "Emod3-2-1",
						"type": "INT64"
					},
					{
						"name": "Emod3-2-2",
						"type": "INT64"
					},
					{
						"name": "Emod3-2-3",
						"type": "INT64"
					},
					{
						"name": "Emod3-2-4",
						"type": "INT64"
					},
					{
						"name": "Emod3-3",
						"type": "INT64"
					},
					{
						"name": "Emod3-4",
						"type": "INT64"
					},
					{
						"name": "Ecore3",
						"type": "INT64"
					},
					{
						"name": "Emod4",
						"type": "INT64"
					},
					{
						"name": "Emod4-1",
						"type": "INT64"
					},
					{
						"name": "Emod4-2",
						"type": "INT64"
					},
					{
						"name": "Emod4-3",
						"type": "INT64"
					},
					{
						"name": "Emod4-4",
						"type": "INT64"
					},
					{
						"name": "Ecore4",
						"type": "INT64"
					},
					{
						"name": "cons_cod",
						"type": "UTF8"
					},
					{
						"name": "closing_date",
						"type": "DATE"
					},
					{
						"name": "n_months",
						"type": "INT64"
					},
					{
						"name": "acc_model",
						"type": "UTF8"
					},
					{
						"name": "red",
						"type": "BOOLEAN"
					},
					{
						"name": "augmented",
						"type": "BOOLEAN"
					},
					{
						"name": "has_gaps",
						"type": "BOOLEAN"
					},
					{
						"name": "n_consecutive_years",
						"type": "INT64"
					},
					{
						"name": "added_value",
						"type": "INT64"
					},
					{
						"name": "EBITDA",
						"type": "INT64"
					},
					{
						"name": "EBIT",
						"type": "INT64"
					},
					{
						"name": "EBT",
						"type": "INT64"
					},
					{
						"name": "deferred_liq",
						"type": "INT64"
					},
					{
						"name": "cur_active",
						"type": "INT64"
					},
					{
						"name": "tot_investiments",
						"type": "INT64"
					},
					{
						"name": "cur_passive",
						"type": "INT64"
					},
					{
						"name": "cons_passive",
						"type": "INT64"
					},
					{
						"name": "tot_sources",
						"type": "INT64"
					},
					{
						"name": "CCnLp",
						"type": "INT64"
					},
					{
						"name": "CCn",
						"type": "INT64"
					},
					{
						"name": "op_EBIT",
						"type": "INT64"
					},
					{
						"name": "inv_CAP",
						"type": "INT64"
					},
					{
						"name": "UFCF",
						"type": "DOUBLE"
					},
					{
						"name": "opCash_capital",
						"type": "DOUBLE"
					},
					{
						"name": "liq_ret_activity",
						"type": "DOUBLE"
					},
					{
						"name": "ROI",
						"type": "DOUBLE"
					},
					{
						"name": "ROCE",
						"type": "DOUBLE"
					},
					{
						"name": "ROE",
						"type": "DOUBLE"
					},
					{
						"name": "ROA",
						"type": "DOUBLE"
					},
					{
						"name": "sales_assets",
						"type": "DOUBLE"
					},
					{
						"name": "financial_ebitda",
						"type": "DOUBLE"
					},
					{
						"name": "prod_per_empl",
						"type": "DOUBLE"
					},
					{
						"name": "quick_ratio",
						"type": "DOUBLE"
					},
					{
						"name": "secondary_liq",
						"type": "DOUBLE"
					},
					{
						"name": "self_coverage",
						"type": "DOUBLE"
					},
					{
						"name": "global_coverage",
						"type": "DOUBLE"
					},
					{
						"name": "rct",
						"type": "DOUBLE"
					},
					{
						"name": "Icap",
						"type": "DOUBLE"
					},
					{
						"name": "financial_sust",
						"type": "DOUBLE"
					},
					{
						"name": "cap_adequacy",
						"type": "DOUBLE"
					},
					{
						"name": "workCap_sales",
						"type": "DOUBLE"
					},
					{
						"name": "op_leverage",
						"type": "DOUBLE"
					},
					{
						"name": "UFCF_cap",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ManualStagingBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "testing"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB_Delta_Lake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDatabricks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-621924991732662.2.azuredatabricks.net",
					"clusterId": "1117-123610-x5x80num",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "databricks-pietro"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ManualStagingBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ManualStagingBlob_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ManualStagingBlob_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunTime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 16,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cosmos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Balance_Sheets_Staging",
								"type": "DatasetReference"
							},
							"name": "BalanceSheets"
						},
						{
							"dataset": {
								"referenceName": "Anagraphics_Staging",
								"type": "DatasetReference"
							},
							"name": "Anagraphics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDb",
								"type": "DatasetReference"
							},
							"name": "ToCosmos"
						}
					],
					"transformations": [
						{
							"name": "Groupbyid"
						},
						{
							"name": "CreateBSStructs",
							"description": "Creating Struct columns\n"
						},
						{
							"name": "CombineAnag"
						}
					],
					"scriptLines": [
						"source(output(",
						"          uuid as string,",
						"          id as string,",
						"          year as long,",
						"          features_calc_timestamp as timestamp,",
						"          AP1 as long,",
						"          AP2 as long,",
						"          {AP2-1} as long,",
						"          {AP2-2} as long,",
						"          {AP2-3} as long,",
						"          AP3 as long,",
						"          {AP3-1} as long,",
						"          {AP3-2} as long,",
						"          {AP3-2-1} as long,",
						"          {AP3-2-2} as long,",
						"          {AP3-3} as long,",
						"          {AP3-4} as long,",
						"          {AP3-5} as long,",
						"          AP4 as long,",
						"          AP as long,",
						"          PP1 as long,",
						"          {PP1-1} as long,",
						"          {PP1-2} as long,",
						"          {PP1-3} as long,",
						"          {PP1-4} as long,",
						"          {PP1-5} as long,",
						"          {PP1-6} as long,",
						"          {PP1-7} as long,",
						"          {PP1-8} as long,",
						"          {PP1-9} as long,",
						"          {PP1-10} as long,",
						"          PP2 as long,",
						"          PP3 as long,",
						"          PP4 as long,",
						"          {PP4-1} as long,",
						"          {PP4-2} as long,",
						"          PP5 as long,",
						"          PP as long,",
						"          Ecore1 as long,",
						"          {Ecore1-1} as long,",
						"          {Ecore1-2} as long,",
						"          {Ecore1-3} as long,",
						"          {Ecore1-4} as long,",
						"          {Ecore1-5} as long,",
						"          {Ecore1-6} as long,",
						"          Emod1 as long,",
						"          {Emod1-1} as long,",
						"          {Emod1-2} as long,",
						"          {Emod1-3} as long,",
						"          {Emod1-4} as long,",
						"          {Emod1-4-1} as long,",
						"          {Emod1-4-2} as long,",
						"          {Emod1-4-3} as long,",
						"          {Emod1-4-4} as long,",
						"          {Emod1-4-5} as long,",
						"          {Emod1-5} as long,",
						"          {Emod1-5-1} as long,",
						"          {Emod1-5-2} as long,",
						"          {Emod1-5-3} as long,",
						"          {Emod1-5-4} as long,",
						"          {Emod1-6} as long,",
						"          {Emod1-7} as long,",
						"          {Emod1-8} as long,",
						"          {Emod1-9} as long,",
						"          Ecore2 as long,",
						"          Emod2 as long,",
						"          {Emod2-1} as long,",
						"          {Emod2-2} as long,",
						"          {Emod2-2-1} as long,",
						"          {Emod2-2-2} as long,",
						"          {Emod2-2-3} as long,",
						"          {Emod2-2-4} as long,",
						"          {Emod2-3} as long,",
						"          {Emod2-4} as long,",
						"          Emod3 as long,",
						"          {Emod3-1} as long,",
						"          {Emod3-1-1} as long,",
						"          {Emod3-1-2} as long,",
						"          {Emod3-1-3} as long,",
						"          {Emod3-1-4} as long,",
						"          {Emod3-2} as long,",
						"          {Emod3-2-1} as long,",
						"          {Emod3-2-2} as long,",
						"          {Emod3-2-3} as long,",
						"          {Emod3-2-4} as long,",
						"          {Emod3-3} as long,",
						"          {Emod3-4} as long,",
						"          Ecore3 as long,",
						"          Emod4 as long,",
						"          {Emod4-1} as long,",
						"          {Emod4-2} as long,",
						"          {Emod4-3} as long,",
						"          {Emod4-4} as long,",
						"          Ecore4 as long,",
						"          cons_cod as string,",
						"          closing_date as date,",
						"          n_months as long,",
						"          acc_model as string,",
						"          red as boolean,",
						"          augmented as boolean,",
						"          has_gaps as boolean,",
						"          n_consecutive_years as long,",
						"          added_value as long,",
						"          EBITDA as long,",
						"          EBIT as long,",
						"          EBT as long,",
						"          deferred_liq as long,",
						"          cur_active as long,",
						"          tot_investiments as long,",
						"          cur_passive as long,",
						"          cons_passive as long,",
						"          tot_sources as long,",
						"          CCnLp as long,",
						"          CCn as long,",
						"          op_EBIT as long,",
						"          inv_CAP as long,",
						"          UFCF as double,",
						"          opCash_capital as double,",
						"          liq_ret_activity as double,",
						"          ROI as double,",
						"          ROCE as double,",
						"          ROE as double,",
						"          ROA as double,",
						"          sales_assets as double,",
						"          financial_ebitda as double,",
						"          prod_per_empl as double,",
						"          quick_ratio as double,",
						"          secondary_liq as double,",
						"          self_coverage as double,",
						"          global_coverage as double,",
						"          rct as double,",
						"          Icap as double,",
						"          financial_sust as double,",
						"          cap_adequacy as double,",
						"          workCap_sales as double,",
						"          op_leverage as double,",
						"          UFCF_cap as double",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> BalanceSheets",
						"source(output(",
						"          id as string,",
						"          att_ita as string,",
						"          att_en as string,",
						"          ATECO as long,",
						"          NACE as long,",
						"          name as string,",
						"          address as string,",
						"          zip_code as long,",
						"          city as string,",
						"          province as string,",
						"          region as string,",
						"          lat as double,",
						"          lon as double,",
						"          ateco_lv1 as long,",
						"          ateco_lv2 as long,",
						"          ateco_lv3 as long,",
						"          nace_lv1 as long,",
						"          nace_lv2 as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Anagraphics",
						"CreateBSStructs aggregate(groupBy(id),",
						"     financials = collect(Financials)) ~> Groupbyid",
						"BalanceSheets derive(Financials = @(uuid=uuid,",
						"          year=year,",
						"          ebit=EBIT)) ~> CreateBSStructs",
						"Groupbyid, Anagraphics join(Groupbyid@id == Anagraphics@id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CombineAnag",
						"CombineAnag sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     format: 'document',",
						"     partitionKey: ['/id'],",
						"     throughput: 5000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     preCommands: [],",
						"     postCommands: []) ~> ToCosmos"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Balance_Sheets_Staging')]",
				"[concat(variables('factoryId'), '/datasets/Anagraphics_Staging')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDb')]"
			]
		}
	]
}