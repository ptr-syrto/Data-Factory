{
	"name": "Cosmos",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "BalanceSheets"
				},
				{
					"name": "Anagraphics"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CompaniesCosmos",
						"type": "DatasetReference"
					},
					"name": "ToCosmos"
				}
			],
			"transformations": [
				{
					"name": "Groupbyid"
				},
				{
					"name": "CreateBSStructs",
					"description": "Creating Struct columns\n"
				},
				{
					"name": "CombineInfo"
				}
			],
			"scriptLines": [
				"source(output(",
				"          old_id as string,",
				"          uuid as string,",
				"          year as integer,",
				"          market_type2 as (section as string, market_area as string, size as string),",
				"          market_type1 as (NACE as long, market_area as string, size as string),",
				"          has_gaps as boolean,",
				"          employees as long,",
				"          acc_format as string,",
				"          added_value as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          deferred_liq as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          cur_passive as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          cons_passive as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          tot_sources as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          op_EBIT as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          ROE as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          ROA as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          sales_assets as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          prod_per_empl as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          self_coverage as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          ICap as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          financial_sust as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          cap_adequacy as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          CBC as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Personnel_Cost_to_Revenue as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Indeb_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          DSO as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          DPO as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          DSI as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Non_Curr_Liabilities_Fixed_Asset_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Curr_Asset_Total_Asset_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Current_Debt_Total_Debt_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Cash_Curr_Asset_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Market_Value as (value as long, previous as long, year_change as double, market_diff as double, market as long, score as byte),",
				"          Financial_Debt_Net_Worth as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Liquid_Cov_Fin_Debt as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Liquidity as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          Revenue as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          Costs_Raw_Materials_Services as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {asset-liability_mismatch} as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-01} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-02} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-03} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-04} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-05} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-06} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-07} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-08} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-09} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-11} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-12} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-13} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-14} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-15} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-16} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-18} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-19} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-20} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          EBITDA as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          cur_active as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          CCnLp as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          UFCF as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          CapEx as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          quick_ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          global_coverage as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          RCT as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Cash_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          CCC as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Added_Value_Employee as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Industry_Contribution_GDP as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          financial_mismatch as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          op_EBIT_Margin as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {Revenue_self-financing} as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {CAGR_3-years} as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-17} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          EBIT as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          tot_investiments as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          CCn as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          financial_ebitda as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          secondary_liq as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Ebitda_Margin as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {Ebitda_Fin-Interest} as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Debt_ebitda_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Capex_Sales_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {liquidity-debt_service_cover_ratio} as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          interest_coverage_ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          EBT as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          inv_CAP as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          workCap_sales as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          op_leverage as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          ROTA as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {Ebitda_CAGR_3-years} as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Ebit_Margin as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {FE-10} as (value as long, previous as long, year_change as double, market_diff as double, market as double, score as byte),",
				"          ROI as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          ROCE as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          UFCF_cap as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          opCash_capital as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          liq_ret_activity as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          net_return_on_invested_capital as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {Zp-scoreltman} as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          {Zpp-scoreltman} as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          Value_Creation_Index as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          revenue_growth as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          OverIndebtedness_Ratio as (value as double, previous as double, year_change as double, market_diff as double, market as double, score as byte),",
				"          size as string,",
				"          macro_area as string,",
				"          market_area as string,",
				"          id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true) ~> BalanceSheets",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          TIN as string,",
				"          EVN as string,",
				"          location as (address as (addr_line as string, zip as string, city as string, country as string, country_code as string), coords as (lat as double, lon as double), nuts as (nuts_1 as string, nuts_2 as string, nuts_3 as string)),",
				"          legal as (status as string, founding_date as string),",
				"          nace as (section as string, nace_lv1 as string, nace_lv2 as string, nace_code as string),",
				"          last_available_year as integer,",
				"          size as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true) ~> Anagraphics",
				"CreateBSStructs aggregate(groupBy(id),",
				"     financials = collect(Financials)) ~> Groupbyid",
				"BalanceSheets derive(Financials = @(uuid={uuid},",
				"          year={year},",
				"          employees={employees},",
				"          added_value={added_value},",
				"          deferred_liq={deferred_liq},",
				"          cur_passive={cur_passive},",
				"          cons_passive={cons_passive},",
				"          tot_sources={tot_sources},",
				"          op_EBIT={op_EBIT},",
				"          ROE={ROE},",
				"          ROA={ROA},",
				"          sales_assets={sales_assets},",
				"          prod_per_empl={prod_per_empl},",
				"          self_coverage={self_coverage},",
				"          ICap={ICap},",
				"          financial_sust={financial_sust},",
				"          cap_adequacy={cap_adequacy},",
				"          CBC={CBC},",
				"          Personnel_Cost_to_Revenue={Personnel_Cost_to_Revenue},",
				"          Indeb_Ratio={Indeb_Ratio},",
				"          DSO={DSO},",
				"          DPO={DPO},",
				"          DSI={DSI},",
				"          Non_Curr_Liabilities_Fixed_Asset_Ratio={Non_Curr_Liabilities_Fixed_Asset_Ratio},",
				"          Curr_Asset_Total_Asset_Ratio={Curr_Asset_Total_Asset_Ratio},",
				"          Current_Debt_Total_Debt_Ratio={Current_Debt_Total_Debt_Ratio},",
				"          Cash_Curr_Asset_Ratio={Cash_Curr_Asset_Ratio},",
				"          Market_Value={Market_Value},",
				"          Financial_Debt_Net_Worth={Financial_Debt_Net_Worth},",
				"          Liquid_Cov_Fin_Debt={Liquid_Cov_Fin_Debt},",
				"          Liquidity={Liquidity},",
				"          Revenue={Revenue},",
				"          Costs_Raw_Materials_Services={Costs_Raw_Materials_Services},",
				"          {asset-liability_mismatch}={asset-liability_mismatch},",
				"          EBITDA={EBITDA},",
				"          cur_active={cur_active},",
				"          CCnLp={CCnLp},",
				"          UFCF={UFCF},",
				"          CapEx={CapEx},",
				"          quick_ratio={quick_ratio},",
				"          global_coverage={global_coverage},",
				"          RCT={RCT},",
				"          Cash_Ratio={Cash_Ratio},",
				"          CCC={CCC},",
				"          Added_Value_Employee={Added_Value_Employee},",
				"          Industry_Contribution_GDP={Industry_Contribution_GDP},",
				"          financial_mismatch={financial_mismatch},",
				"          op_EBIT_Margin={op_EBIT_Margin},",
				"          {Revenue_self-financing}={Revenue_self-financing},",
				"          {CAGR_3-years}={CAGR_3-years},",
				"          EBIT={EBIT},",
				"          tot_investiments={tot_investiments},",
				"          CCn={CCn},",
				"          financial_ebitda={financial_ebitda},",
				"          secondary_liq={secondary_liq},",
				"          Ebitda_Margin={Ebitda_Margin},",
				"          {Ebitda_Fin-Interest}={Ebitda_Fin-Interest},",
				"          Debt_ebitda_Ratio={Debt_ebitda_Ratio},",
				"          Capex_Sales_Ratio={Capex_Sales_Ratio},",
				"          {liquidity-debt_service_cover_ratio}={liquidity-debt_service_cover_ratio},",
				"          interest_coverage_ratio={interest_coverage_ratio},",
				"          EBT={EBT},",
				"          inv_CAP={inv_CAP},",
				"          workCap_sales={workCap_sales},",
				"          op_leverage={op_leverage},",
				"          ROTA={ROTA},",
				"          {Ebitda_CAGR_3-years}={Ebitda_CAGR_3-years},",
				"          Ebit_Margin={Ebit_Margin},",
				"          ROI={ROI},",
				"          ROCE={ROCE},",
				"          UFCF_cap={UFCF_cap},",
				"          opCash_capital={opCash_capital},",
				"          liq_ret_activity={liq_ret_activity},",
				"          net_return_on_invested_capital={net_return_on_invested_capital},",
				"          {Zp-scoreltman}={Zp-scoreltman},",
				"          {Zpp-scoreltman}={Zpp-scoreltman},",
				"          Value_Creation_Index={Value_Creation_Index},",
				"          revenue_growth={revenue_growth},",
				"          OverIndebtedness_Ratio={OverIndebtedness_Ratio},",
				"          size={size})) ~> CreateBSStructs",
				"Groupbyid, Anagraphics join(Groupbyid@id == Anagraphics@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CombineInfo",
				"CombineInfo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:true,",
				"     format: 'document',",
				"     partitionKey: ['/id'],",
				"     throughput: 4000,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     preCommands: [],",
				"     postCommands: []) ~> ToCosmos"
			]
		}
	}
}