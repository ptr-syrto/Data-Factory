{
	"name": "Cosmos",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Balance_Sheets_Staging",
						"type": "DatasetReference"
					},
					"name": "BalanceSheets"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CosmosDb",
						"type": "DatasetReference"
					},
					"name": "ToCosmos"
				}
			],
			"transformations": [
				{
					"name": "Groupbyid"
				},
				{
					"name": "CreateStructs",
					"description": "Creating Struct columns\n"
				}
			],
			"scriptLines": [
				"source(output(",
				"          uuid as string,",
				"          id as string,",
				"          year as long,",
				"          features_calc_timestamp as timestamp,",
				"          AP1 as long,",
				"          AP2 as long,",
				"          {AP2-1} as long,",
				"          {AP2-2} as long,",
				"          {AP2-3} as long,",
				"          AP3 as long,",
				"          {AP3-1} as long,",
				"          {AP3-2} as long,",
				"          {AP3-2-1} as long,",
				"          {AP3-2-2} as long,",
				"          {AP3-3} as long,",
				"          {AP3-4} as long,",
				"          {AP3-5} as long,",
				"          AP4 as long,",
				"          AP as long,",
				"          PP1 as long,",
				"          {PP1-1} as long,",
				"          {PP1-2} as long,",
				"          {PP1-3} as long,",
				"          {PP1-4} as long,",
				"          {PP1-5} as long,",
				"          {PP1-6} as long,",
				"          {PP1-7} as long,",
				"          {PP1-8} as long,",
				"          {PP1-9} as long,",
				"          {PP1-10} as long,",
				"          PP2 as long,",
				"          PP3 as long,",
				"          PP4 as long,",
				"          {PP4-1} as long,",
				"          {PP4-2} as long,",
				"          PP5 as long,",
				"          PP as long,",
				"          Ecore1 as long,",
				"          {Ecore1-1} as long,",
				"          {Ecore1-2} as long,",
				"          {Ecore1-3} as long,",
				"          {Ecore1-4} as long,",
				"          {Ecore1-5} as long,",
				"          {Ecore1-6} as long,",
				"          Emod1 as long,",
				"          {Emod1-1} as long,",
				"          {Emod1-2} as long,",
				"          {Emod1-3} as long,",
				"          {Emod1-4} as long,",
				"          {Emod1-4-1} as long,",
				"          {Emod1-4-2} as long,",
				"          {Emod1-4-3} as long,",
				"          {Emod1-4-4} as long,",
				"          {Emod1-4-5} as long,",
				"          {Emod1-5} as long,",
				"          {Emod1-5-1} as long,",
				"          {Emod1-5-2} as long,",
				"          {Emod1-5-3} as long,",
				"          {Emod1-5-4} as long,",
				"          {Emod1-6} as long,",
				"          {Emod1-7} as long,",
				"          {Emod1-8} as long,",
				"          {Emod1-9} as long,",
				"          Ecore2 as long,",
				"          Emod2 as long,",
				"          {Emod2-1} as long,",
				"          {Emod2-2} as long,",
				"          {Emod2-2-1} as long,",
				"          {Emod2-2-2} as long,",
				"          {Emod2-2-3} as long,",
				"          {Emod2-2-4} as long,",
				"          {Emod2-3} as long,",
				"          {Emod2-4} as long,",
				"          Emod3 as long,",
				"          {Emod3-1} as long,",
				"          {Emod3-1-1} as long,",
				"          {Emod3-1-2} as long,",
				"          {Emod3-1-3} as long,",
				"          {Emod3-1-4} as long,",
				"          {Emod3-2} as long,",
				"          {Emod3-2-1} as long,",
				"          {Emod3-2-2} as long,",
				"          {Emod3-2-3} as long,",
				"          {Emod3-2-4} as long,",
				"          {Emod3-3} as long,",
				"          {Emod3-4} as long,",
				"          Ecore3 as long,",
				"          Emod4 as long,",
				"          {Emod4-1} as long,",
				"          {Emod4-2} as long,",
				"          {Emod4-3} as long,",
				"          {Emod4-4} as long,",
				"          Ecore4 as long,",
				"          cons_cod as string,",
				"          closing_date as date,",
				"          n_months as long,",
				"          acc_model as string,",
				"          red as boolean,",
				"          augmented as boolean,",
				"          has_gaps as boolean,",
				"          n_consecutive_years as long,",
				"          added_value as long,",
				"          EBITDA as long,",
				"          EBIT as long,",
				"          EBT as long,",
				"          deferred_liq as long,",
				"          cur_active as long,",
				"          tot_investiments as long,",
				"          cur_passive as long,",
				"          cons_passive as long,",
				"          tot_sources as long,",
				"          CCnLp as long,",
				"          CCn as long,",
				"          op_EBIT as long,",
				"          inv_CAP as long,",
				"          UFCF as double,",
				"          opCash_capital as double,",
				"          liq_ret_activity as double,",
				"          ROI as double,",
				"          ROCE as double,",
				"          ROE as double,",
				"          ROA as double,",
				"          sales_assets as double,",
				"          financial_ebitda as double,",
				"          prod_per_empl as double,",
				"          quick_ratio as double,",
				"          secondary_liq as double,",
				"          self_coverage as double,",
				"          global_coverage as double,",
				"          rct as double,",
				"          Icap as double,",
				"          financial_sust as double,",
				"          cap_adequacy as double,",
				"          workCap_sales as double,",
				"          op_leverage as double,",
				"          UFCF_cap as double",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> BalanceSheets",
				"CreateStructs aggregate(groupBy(id),",
				"     financials = collect(Financials)) ~> Groupbyid",
				"BalanceSheets derive(Financials = @(uuid=uuid,",
				"          year=year,",
				"          ccn=CCn,",
				"          roe=ROE,",
				"          ebitda=EBITDA,",
				"          ebit=EBIT,",
				"          roi=ROI,",
				"          quick_ratio=quick_ratio)) ~> CreateStructs",
				"Groupbyid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:true,",
				"     format: 'document',",
				"     partitionKey: ['/id'],",
				"     throughput: 5000,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     preCommands: [],",
				"     postCommands: []) ~> ToCosmos"
			]
		}
	}
}